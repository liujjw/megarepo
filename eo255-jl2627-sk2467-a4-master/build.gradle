plugins {
    id 'java'
    id 'eclipse'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.8' apply true
}

if (JavaVersion.current() == JavaVersion.VERSION_11
    || JavaVersion.current() == JavaVersion.VERSION_12){
    apply plugin: 'org.openjfx.javafxplugin'
}

apply plugin: 'java'
// external repositories where dependencies of your project are found
repositories {
    // Use 'jcenter' for resolving external dependencies
    jcenter()
}

dependencies {
    // the spark webserver
    implementation 'com.sparkjava:spark-core:2.9.1'
    // GSON, for parsing and generating JSON
    implementation 'com.google.code.gson:gson:2.8.5'
    // run tests with JUnit 5
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.5.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
    // slf4j, for test logging
    implementation 'org.slf4j:slf4j-api:1.8.0-beta2'
    implementation 'org.slf4j:slf4j-simple:1.8.0-beta2'
}

if (JavaVersion.current() == JavaVersion.VERSION_11
    || JavaVersion.current() == JavaVersion.VERSION_12) {
    javafx {
        modules = [ 'javafx.controls', 'javafx.web', 'javafx.fxml' ]
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
    }


    
}
    mainClassName = 'main.MainServerGUI' // or whatever your class is


task mainJar(type: Jar) {
    archiveBaseName.set('Critterworld')
    manifest {
        attributes 'Main-Class': mainClassName
    }
    from(sourceSets.main.output) {
        include '**'
    }

jar.dependsOn mainJar
// simulation jar for A6
    task appJar(type: Jar) {
        archiveBaseName.set('SimulationApp')
        manifest {
            attributes 'Main-Class': 'view.CritterWorld'
        }
        from(sourceSets.main.output) {
            include '**'
        }
    }

    jar.dependsOn appJar


// console jar for A5
    jar {
        archiveBaseName.set('Console')
        manifest {
            attributes 'Main-Class': 'console.Console'
        }
        from(sourceSets.main.output) {
            include '**'
        }
    }

// parse and mutate jar for A4
    task parseAndMutateJar(type: Jar) {
        archiveBaseName.set('ParseAndMutate')
        manifest {
            attributes 'Main-Class': 'main.ParseAndMutateApp'
        }
        from(sourceSets.main.output) {
            include '**'
        }
    }

// make jar task assemble both jars
    jar.dependsOn parseAndMutateJar

}