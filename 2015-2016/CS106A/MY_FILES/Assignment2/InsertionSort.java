import java.util.Arrays;

import acm.program.*;

public class InsertionSort extends ConsoleProgram{
	
	public void run(){
		insertionSort2(array);
		println(Arrays.toString(array));
	}
	
	int[] array = {
			797,815,118,522,64,728,29,709,735,801,497,930,698,496,379,307,184,301,390,188,863,763,343,331,308,736,770,679,585,816,57,644,445,668,344,617,356,569,598,925,85,469,708,152,627,973,563,524,581,6,552,946,287,282,518,890,271,819,142,265,194,396,173,472,835,196,712,74,341,314,140,994,59,609,753,219,726,339,36,635,594,885,865,856,510,716,200,32,537,656,115,362,848,961,382,345,888,606,645,81,589,208,446,231,570,838,82,324,171,119,195,494,61,790,841,948,877,821,236,404,714,686,460,347,49,540,897,461,754,746,810,901,410,306,548,596,489,980,743,976,829,434,963,912,663,782,150,595,229,560,315,781,880,464,320,92,334,573,330,311,1000,60,576,364,204,868,170,500,34,317,515,845,577,291,711,954,854,916,747,715,428,650,693,1,705,440,482,869,333,785,889,941,5,591,23,599,89,701,719,939,488,336,63,583,259,621,982,742,102,11,640,449,646,97,667,894,652,145,951,669,730,367,359,557,855,433,732,932,883,834,418,134,556,183,846,381,506,131,636,893,592,551,723,555,942,40,84,233,157,623,55,905,957,3,136,950,274,575,107,470,228,96,981,739,53,975,727,783,931,484,378,16,814,798,771,106,132,959,718,955,87,156,503,139,512,369,166,979,879,230,768,223,303,507,729,272,267,737,168,262,31,626,44,511,241,24,986,910,10,413,13,245,436,17,153,374,993,167,765,870,297,989,380,452,738,794,873,985,516,755,491,702,799,866,904,292,642,734,98,212,541,872,520,47,441,144,394,349,218,355,800,502,352,205,758,664,416,804,422,399,860,661,654,960,911,304,602,401,210,444,731,185,15,974,257,921,597,213,812,647,949,122,266,478,853,659,928,360,9,749,459,509,68,471,514,999,246,239,412,33,945,792,720,358,886,745,481,852,977,335,501,811,70,253,751,397,580,677,76,247,538,965,988,202,558,926,463,66,689,824,795,536,403,533,409,258,971,51,319,368,532,337,612,426,338,147,25,836,847,224,414,733,915,922,725,840,103,808,316,294,181,947,513,46,907,299,752,176,353,844,232,442,933,610,966,387,207,27,902,970,298,77,871,432,269,833,825,318,351,614,817,14,121,465,290,20,158,175,688,559,52,94,423,407,250,842,284,995,878,987,625,264,133,895,30,162,967,786,48,958,531,681,519,744,155,523,435,582,116,584,93,8,605,775,21,419,687,633,476,281,805,325,172,757,206,365,590,809,831,35,431,620,696,114,332,964,525,443,762,226,113,991,372,780,456,389,673,717,632,216,776,296,927,467,110,289,660,67,953,141,43,561,543,411,756,104,417,750,493,7,143,100,791,154,887,622,198,479,2,535,670,182,634,439,748,261,323,943,968,163,542,424,539,616,527,340,209,283,361,455,448,827,813,544,273,529,545,249,285,295,363,900,373,487,197,779,692,255,934,741,690,919,313,574,990,427,929,286,843,984,240,309,760,526,685,713,72,86,38,450,83,130,740,638,784,534,348,123,187,554,189,71,18,50,861,263,517,288,457,648,674,899,662,437,613,275,697,39,75,129,256,875,923,79,601,498,618,400,568,881,37,978,593,604,867,65,703,180,420,41,619,761,405,69,415,864,629,328,159,199,192,675,566,421,26,451,586,665,579,906,721,649,454,839,830,828,806,125,124,706,109,486,78,398,680,495,22,700,822,862,375,321,914,952,997,242,105,366,12,186,567,490,425,234,882,190,151,892,221,678,793,637,377,694,244,148,891,521,453,342,913,4,278,370,983,252,466,766,876,956,820,898,276,918,165,146,944,643,528,392,475,909,849,655,237,305,406,628,682,312,562,767,220,802,572,178,710,468,474,935,917,969,117,251,657,111,480,565,300,485,88,164,615,191,851,759,508,174,499,243,120,823,691,248,924,112,937,56,992,492,826,254,260,169,73,724,395,268,611,310,58,588,908,699,402,600,329,683,354,302,127,429,384,101,639,896,215,270,807,280,357,350,578,177,160,653,773,383,631,857,179,789,972,238,787,473,769,42,903,90,149,858,388,137,859,530,764,936,658,998,850,832,135,322,920,214,447,293,546,391,778,837,222,235,408,547,676,666,651,211,385,393,818,553,505,722,630,80,603,587,477,376,438,684,707,201,225,796,277,346,458,695,704,99,940,54,371,108,138,128,607,193,874,19,571,788,227,549,161,884,279,203,996,962,803,608,550,672,386,217,430,641,126,671,564,327,772,938,483,28,504,95,91,462,326,777,774,45,624,62	};
	
	public void insertionSort(int[] array){
		for(int i = 0; i < array.length - 1; i++){
			if(array[i] > array[i + 1]){
				int indexOfInsertee = i + 1;
				int indexToStartShift = insertAt(array, indexOfInsertee);
				shift(array, indexToStartShift, indexOfInsertee);
			}
		}
	}
	
	private int insertAt(int[] array, int indexOfInsertee){
		for(int i = 0; i < indexOfInsertee; i++){
			if(array[indexOfInsertee] < array[i]){
				return i;
			}
		} 
		return -1;
	}
	private void shift(int[] array, int indexToStartShift, int indexOfInsertee){
		int tmp = array[indexToStartShift];
		array[indexToStartShift] = array[indexOfInsertee];
		
		for(int i = indexToStartShift + 1; i < indexOfInsertee; i++){
			array[i] = tmp;
			tmp = array[i + 1];
		}
	}
	
	// twice as fast as bubble sort, three times as slow as arrays.sort tho
	public void insertionSort2(int[] array){
		for(int i = 0; i < array.length - 1; i++){	
			if(array[i] > array[i + 1]){
				int insert = array[i + 1];
				int insertIndex = -1;
				for(int j = 0; j <= i; j++){
					if(insert < array[j]){
						insertIndex = j;
						break;
					}
				}
				int tmp1 = array[insertIndex];
				int incrementor = 0;
				for(int k = insertIndex; k < (i + 1); k++){
					int tmp2 = array[insertIndex + (incrementor) + 1];
					array[insertIndex + 1 + (incrementor)] = tmp1;
					tmp1 = tmp2;
					incrementor++;
				}
				array[insertIndex] = insert;
			}
		
		}
	}
	
	
	/**
	 * Insertion sort
	 * Each pass ensure the values covered are correctly ordered with respect to one another.
	 * Shift the values all by one to insert new values in.
	 * So in a for loop, the sub array of sorted values grows by one, so each pass an element is added, but first with respect to
	 * the one prior , which will be sorted with the one prior that if the former condition holds through. Self-referencing loop here >.<*/
}
